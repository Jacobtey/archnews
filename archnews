#!/usr/bin/env python3

"""
Utility for displaying Arch news feed in console.

author: Martin Jiřička (mjiricka@gmail.com), 2017

licence: MIT
"""

import argparse
import locale
import sys
from datetime import datetime, timedelta
from email.utils import parsedate_tz, mktime_tz
from html.parser import HTMLParser
from re import sub
from textwrap import wrap
from urllib import request
from xml.dom import minidom



# ************************************************************
#  Globals
# ************************************************************

FEED_URL = 'https://www.archlinux.org/feeds/news/'

WRAP_SIZE = 100  # Zero for no wrap.
COLORIZE_OUTPUT = True
ORDER = True  # True = newest entries last, False = newest entries first
NUM_ENTRIES = 3  # 0 for all


# ************************************************************
#  Output
# ************************************************************

class Out:
    """Class for printing output, it supports color printing. Printing method must be
       initialized via `set` method that adds `print` method."""
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    GRAY = '\033[90m'
    ENDC = '\033[0m'

    @staticmethod
    def _color_print(color, text):
        """Prints colored text, possible colors: green, blue and red."""
        if color == 'green':
            print(Out.GREEN + text + Out.ENDC)
        elif color == 'blue':
            print(Out.BLUE + text + Out.ENDC)
        elif color == 'gray':
            print(Out.GRAY + text + Out.ENDC)

    @staticmethod
    def _white_print(_, text):
        """Prints text."""
        print(text)

    @staticmethod
    def set(colorize_output):
        """Sets the default value."""
        if colorize_output:
            Out.print = Out._color_print
        else:
            Out.print = Out._white_print


# ************************************************************
#  HTML parser
# ************************************************************

class TheParser(HTMLParser):
    """Parser formats HTML into plain text, result is stored inside `out` property."""
    def __init__(self):
        super(TheParser, self).__init__()

        self.out = ''
        self._stack = []
        self._inside_pre = False

    @staticmethod
    def _squeeze_whitespace(text):
        """Squeezes whitespaces into one single space."""
        return sub(r'\s+', ' ', text)

    def _append(self, text):
        if not text:
            return

        if self.out:
            last_char = self.out[-1]
        else:
            last_char = ''

        if last_char.isspace():
            if text[0] in [' ', '\t']:
                # Squeeze spaces, unless they are intended (intended are those in
                # `text` variable).
                self.out = self.out.rstrip(' \t') + text
            else:
                if last_char == text[0] == '\n':
                    # This ensures that at most two consecutive new lines are added.
                    self.out = self.out.rstrip() + '\n\n' + text.lstrip('\n')
                else:
                    self.out += text
        else:
            self.out += text

    def _append_raw(self, text):
        self.out += text

    def handle_starttag(self, tag, attrs):
        self._stack.append(tag)

        if tag == 'a':
            self._append('<')
        elif tag == 'br':
            self._append('\n')
        elif tag == 'pre':
            self._inside_pre = True
        elif tag == 'li':
            self._append(' \u2022 ')  # Bullet Unicode symbol.

    def handle_endtag(self, tag):
        # HTML might be invalid, so check the emptiness.
        if self._stack:
            self._stack.pop()

        if tag in ['p', 'div']:
            self._append('\n\n')
        elif tag == 'a':
            self._append('>')
        elif tag in ['li', 'ul', 'ol']:
            self._append('\n')
        elif tag == 'pre':
            self._inside_pre = False
            self._append('\n')

    def handle_data(self, data):
        if self._stack:
            tag = self._stack[-1]
        else:
            tag = ''

        if self._inside_pre:
            # Everything inside <pre> is indented by three spaces.
            indented_data = '\n'.join(['   '+line for line in data.split('\n')])
            self._append_raw(indented_data)
        elif tag == 'code':
            self._append(data.replace(' ', '\u00A0'))  # Non breaking space.
        elif tag == 'pre':
            self._append('\n')
        else:
            squeezed_data = self._squeeze_whitespace(data)
            # Do not allow spaces at a paragraph beginning.
            if squeezed_data != ' ' or (self.out and self.out[-1] != '\n'):
                self._append(squeezed_data)

    def error(self, message):
        raise SyntaxError('Error when parsing message: ' + message)

    @staticmethod
    def unhtml(text):
        """Uses parser on given `text` and returns the result."""
        parser = TheParser()
        parser.feed(text)
        return parser.out


# ************************************************************
#  Wrap
# ************************************************************

class Wrap:
    """Class for wrapping text on given width. It must be configured the same
       way as class `Out`: `set` method and then `wrap` method."""

    _wrap_size = 0

    @staticmethod
    def _make_wrap(text):
        """Function wrap text."""
        def wrap_line(line):
            """Function wraps one line of unintended (3 spaces) code."""
            if line[0:3] == '   ':
                return line
            return '\n'.join(
                wrap(line, Wrap._wrap_size, drop_whitespace=True, break_long_words=False))

        lines = text.split('\n')
        lines2 = [wrap_line(l) for l in lines]
        text_wrapped = '\n'.join(lines2)
        return text_wrapped

    @staticmethod
    def _no_wrap(text):
        """Function does not wrap anything."""
        return text

    @staticmethod
    def set(wrap_size):
        """Sets the default value."""
        Wrap._wrap_size = wrap_size
        if wrap_size == 0:
            Wrap.wrap = Wrap._no_wrap
        else:
            Wrap.wrap = Wrap._make_wrap


# ************************************************************
#  Feed-related classes.
# ************************************************************

class FeedEntry:
    """Represents single news feed entry."""
    def __init__(self, time, title, link, description):
        self.time = time
        self.title = title
        self.link = link
        self.description = description

    def print(self, wrap_func):
        """Prints news feed entry."""
        Out.print('gray', self.link)
        Out.print('blue', self.time.strftime('%x %X'))
        Out.print('green', self.title)
        print()
        try:
            text = TheParser.unhtml(self.description)
        except SyntaxError as err:
            text = str(err)
        text = text.strip()
        print(wrap_func(text))


class FeedParser:
    """Parses Arch feed and returns array of `FeedEntry`."""
    @staticmethod
    def _get_text(nodelist):
        buffer = []
        for node in nodelist:
            if node.nodeType == node.TEXT_NODE:
                buffer.append(node.data)
        return ''.join(buffer)

    @staticmethod
    def _get(element, sub_el_name):
        sub_el = element.getElementsByTagName(sub_el_name)[0]
        sub_el_text = FeedParser._get_text(sub_el.childNodes)
        return sub_el_text

    @staticmethod
    def _convert_time(date_rfc2822):
        date_tuple = parsedate_tz(date_rfc2822)
        timestamp = mktime_tz(date_tuple)
        obj = datetime.fromtimestamp(timestamp)
        return obj

    @staticmethod
    def parse_feed(body):
        """Parse feed and returns list of feed entries."""
        xmldoc = minidom.parse(body)
        item_list = xmldoc.getElementsByTagName('item')
        items = []

        for item in item_list:
            title = FeedParser._get(item, 'title')
            link = FeedParser._get(item, 'link')
            pub_date = FeedParser._get(item, 'pubDate')
            description = FeedParser._get(item, 'description')
            time_formatted = FeedParser._convert_time(pub_date)
            items.append(FeedEntry(time_formatted, title, link, description))

        return items


# ************************************************************
#  Filters
# ************************************************************

class Filter:
    """Base class for application filters."""

    def set_filter(self, user_input):
        """Sets filter according input given by an user."""
        pass

    def filter(self, items):
        """Filter given list of items according filter rules."""
        pass

class SinceFilter(Filter):
    """Filtering according date."""
    def __init__(self):
        self._since_filter = None

    def set_filter(self, user_input):
        if '-' in user_input:
            # It should be date in format: YYYY-mm-dd
            self._since_filter = datetime.strptime(user_input, '%Y-%m-%d')
        else:
            num_days = int(user_input)
            # Get date that is `num_days` before today and time is such as
            # all times the day `num_days`-before today will be later.
            self._since_filter = (
                datetime.combine(
                    datetime.today().date() - timedelta(days=num_days),
                    datetime.min.time()))

    def filter(self, items):
        return filter(lambda item: self._since_filter < item.time, items)

class GrepFilter(Filter):
    """Filtering according text."""
    def __init__(self):
        self._grep_filter = None

    def set_filter(self, user_input):
        self._grep_filter = user_input.lower()

    def _test(self, item):
        return (
            self._grep_filter in item.title.lower() or
            self._grep_filter in item.description.lower())

    def filter(self, items):
        return filter(self._test, items)


# ************************************************************
#  main
# ************************************************************

def process_cmd_arguments():
    """Function for processing command line arguments."""
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description='Utility for displaying Arch news feed in console.',
        epilog='Date and time is converted into local time!')

    parser.add_argument(
        '-w', '--wrap', help='wrap length, zero for no wrap, default: ' + str(WRAP_SIZE),
        type=int, default=WRAP_SIZE, dest='wrap_size')

    parser.add_argument(
        '-c', '--color', help='do not print in color, default is colorized output',
        default=COLORIZE_OUTPUT, dest='colorize_output', action='store_false')

    parser.add_argument(
        '-i', '--stdin', help='read feed from stdin, do not fetch data from the Internet',
        default=False, dest='stdin', action='store_true')

    parser.add_argument(
        '-n', '--num-entries',
        help='how many entries to show, zero for all, default: ' + str(NUM_ENTRIES),
        type=int, default=NUM_ENTRIES, dest='num_entries')

    parser.add_argument(
        '-r', '--reversed', help='print newest entries first, by default newest entries are last',
        default=ORDER, dest='order', action='store_false')

    parser.add_argument(
        '-s', '--since', help='''show only entries newer than given date, it can be set as:
integer: entries released before given number of days,
YYYY-mm-dd format: entries released before given date
(In both cases time is not considered, only date!)''',
        dest='since')

    parser.add_argument(
        '-g', '--grep', help='''show only entries that has given string in title or description
(Description containing HTML tag is searched!)''',
        dest='grep')

    return parser.parse_args()


def main(args):
    """Here the interesting part of the script starts."""

    if args.stdin:
        items = FeedParser.parse_feed(sys.stdin)
    else:
        try:
            http_request = request.urlopen(FEED_URL)
        except request.URLError:
            print('Error when trying to fetch Arch Feed News :-(')
            return 1
        items = FeedParser.parse_feed(http_request)

    # Set wrap according parameters.
    Wrap.set(args.wrap_size)

    # Set color output.
    Out.set(args.colorize_output)

    # Set default locale ('' is for the system locale, otherwise
    # e.g. 'cs_CZ.UTF-8' can be used).
    locale.setlocale(locale.LC_ALL, '')

    # Get only given number of entries. (Only if no --since or --grep filter were set.)
    if not args.since or not args.grep:
        if args.num_entries > 0:
            items = items[0:args.num_entries]

    if args.since:
        itemfilter = SinceFilter()
        try:
            itemfilter.set_filter(args.since)
        except:
            print('Bad filter: ' + args.since)
            exit(1)
        items = list(itemfilter.filter(items))

    if args.grep:
        itemfilter = GrepFilter()
        itemfilter.set_filter(args.grep)
        items = list(itemfilter.filter(items))

    # Set correct order.
    if args.order:
        # Function `reversed` cannot be used, it returns iterator
        # that cannot be indexed.
        items = items[::-1]

    for item in items:
        item.print(Wrap.wrap)
        if item == items[-1]:
            print()
        else:
            print('\n\n')

    return 0


# Run the program.
exit(main(process_cmd_arguments()))


# EOF
